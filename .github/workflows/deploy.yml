name: 🚀 Deploy

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📥 Download deps
        uses: bahmutov/npm-install@v1

      - name: 🔬 Lint
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📥 Download deps
        uses: bahmutov/npm-install@v1

      - name: ⚡ Run vitest
        run: npm run test -- --coverage

  build:
    name: 🏗 Build
    needs: [lint, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📥 Download deps
        uses: bahmutov/npm-install@v1

      - name: 🔎 Type check
        run: npm run typecheck --if-present

      - name: 🏗 Build
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            npm run build
          fi
  # docker:
  #   name: 🐳 Build Docker
  #   if: github.ref == 'refs/heads/main'
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   outputs:
  #     image: ${{ steps.image.outputs.image }}
  #     digest: ${{ steps.build.outputs.digest }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=sha,prefix={{branch}}-
  #           type=raw,value=latest,enable={{is_default_branch}}

  #     - name: Build and push Docker image
  #       id: build
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         build-args: |
  #           NODE_ENV=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

  #     - name: Output image
  #       id: image
  #       run: |
  #         echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT

  # deploy:
  #   name: 🚀 Deploy
  #   if: github.ref == 'refs/heads/main'
  #   needs: [docker]
  #   runs-on: ubuntu-24.04

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20

  #     - name: Install Dependencies
  #       run: npm ci

  #     - name: 🏗 Build
  #       run: npm run build

  #     - name: 🚀 Deploy Staging
  #       if: ${{ github.ref == 'refs/heads/develop' }}
  #       run: |

  #     # - name: 🚀 Deploy Production
  #     #   if: ${{ github.ref == 'refs/heads/main' }}

  # security-scan:
  #   name: 🔒 Security Scan
  #   if: github.ref == 'refs/heads/main'
  #   needs: [docker]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     security-events: write

  #   steps:
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ needs.docker.outputs.image }}
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: 'trivy-results.sarif'
